#!/usr/bin/python
# -*- coding:utf-8 -*- 


import unittest
import HTMLTestRunnerCN
import os
import sys
# from log import log

# 将上一级目录路径加入系统路径
sys.path.append('../')
from database_control import DatabaseControl 



# 执行测试的类
class DatabaseControlTestCase(unittest.TestCase): 
    '''继承于Testcase, 是功能类 DatabaseControl 对应的测试类'''

    def setUp(self):
        '''
            是父类TestCase中定义的函数
            在setUp()方法中进行测试前的初始化工作
        '''
        # print "do something before test.Prepare environment."
        self.dbc = DatabaseControl(host='45.77.94.89', port=3306, user='root', passwd='admin', db_name='db_education', charset='utf8')

    def tearDown(self):
        '''
            是父类TestCase中定义的函数
            在tearDown()方法中执行测试后的清除工作
        '''
        # print "do something after test.Clean up."
        self.dbc = None

    @classmethod
    def setUpClass(cls):
        '''
            如果想要在所有case执行之前准备一次环境，并在所有case执行结束之后再清理环境，我们可以用 setUpClass() 与 tearDownClass()
        '''
        # print "This setUpClass() method only called once."
        pass

    @classmethod
    def tearDownClass(cls):
        '''
            如果想要在所有case执行之前准备一次环境，并在所有case执行结束之后再清理环境，我们可以用 setUpClass() 与 tearDownClass()
        '''
        # print "This tearDownClass() method only called once too."
        pass

    def testConnect(self):
        '''
            测试数据库连通性
        '''
        # self.assertEqual(self.dbc.connect(), True)
        self.assertTrue(self.dbc.connect())
        # time.sleep(3)
        # self.assertIsNone(self.dbc.connect())

    def testGetAllCourse(self):
        self.assertIsNotNone(self.dbc.get_all_course())



# 构造测试集
# def gen_suite():
#     suite = unittest.TestSuite()
#     suite.addTest(DatabaseControlTestCase("testConnect"))
#     # suite.addTest(WidgetTestCase("testResize"))
#     # suite.addTest(WidgetTestCase("testDispose"))
#     # suite.addTest(WidgetTestCase("testResize"))
#     return suite



# 测试
if __name__ == "__main__":

    #==========================================================
    # 调用测试集的第一种方法
    # unittest.main(defaultTest = 'gen_suite')
    # unittest.main()


    #==========================================================
    # 调用测试集的另一种方法
    # 构造测试集
    # 执行测试
    # suite = gen_suite()
    # # runner = unittest.TextTestRunner()
    # runner = unittest.TextTestRunner(verbosity=2) # 参数用于指定输出测试函数名称
    # runner.run(suite)

    #==========================================================
    # 将结果用文件输出
    # suite = gen_suite()
    # with open('UnittestTextReport.txt', 'a') as f:
    #     runner = unittest.TextTestRunner(stream=f, verbosity=2)
    #     runner.run(suite)

    #===========================================================
    # 将结果用HTML报告的形式输出
    # 资料来源 :http://tungwaiyip.info/software/HTMLTestRunner.html
    # suite = gen_suite()
    # with open('res/HTMLReport.html', 'w') as f:
    #     runner = HTMLTestRunner(stream=f,
    #                             title='MathFunc Test Report',
    #                             description='generated by HTMLTestRunner.',
    #                             verbosity=2
    #                             )
    #     runner.run(suite)


    #===========================================================
    # 中文HTML结果的输出, 资料来源:https://github.com/findyou/HTMLTestRunnerCN
    # import HTMLTestRunnerCN
    # suite = gen_suite()
    with open('HTMLReportCN.html', 'w') as f:
        runner = HTMLTestRunnerCN.HTMLTestRunner(
            stream=f,
            title=u'单元测试报告',
            description='description',
            tester="corey"
            )
        unittest.main(testRunner=runner, verbosity=2)
        # runner.run(suite)
    # print os.path.abspath(__file__)